SQL Alter Table Operations
https://dev.mysql.com/doc/refman/5.0/en/alter-table.html

stack overflow on action & delete verhalten
http://stackoverflow.com/questions/1027656/what-is-mysqls-default-on-delete-behavior

Wikipedia:
Referentielle Integrität


Referentielle Integrität (RI) ist ein Begriff aus der Informatik. Man versteht darunter Bedingungen, die zur Sicherung der Datenintegrität bei Nutzung relationaler Datenbanken beitragen können. Nach der RI-Regel dürfen Datensätze (über ihre Fremdschlüssel) nur auf existierende Datensätze verweisen.
Danach besteht die RI grundsätzlich aus zwei Teilen:[1]
	1.	Ein neuer Datensatz mit einem Fremdschlüssel kann nur dann in einer Tabelle eingefügt werden, wenn in der referenzierten Tabelle ein Datensatz mit entsprechendem Wert im Primärschlüssel oder einem eindeutigen Alternativschlüssel existiert.
	2.	Eine Datensatzlöschung oder Änderung des Schlüssels in einem Primär-Datensatz ist nur möglich, wenn zu diesem Datensatz keine abhängigen Datensätze in Beziehung stehen.

—> VL Folien
Spalte add
ALTER TABLE gruppe 
ADD COLUMN webseite VARCHAR(100);

Spalte delete
ALTER TABLE gruppe 
DROP COLUMN aktiv,
 DROP COLUMN beschreibung;

Spalte Update
ALTER TABLE gruppe 
MODIFY name VARCHAR(100);

Fremdschlüssel löschen
ALTER TABLE treffen 
DROP FOREIGN KEY treffen_ibfk_1;

Fremdschlüssel Update
ALTER TABLE gruppe 
ADD FOREIGN KEY (verein) R
REFERENCES verein(vId);
<— VL Folien ende

Tabelle Fahrzeug:
ALTER TABLE fahrzeug 
ADD FOREIGN KEY(`fgeschaeftsstellennummer`)
REFERENCES `dbwebanw_sose15_09`.`geschaeftsstelle` (`geschaeftsstellennummer`)
ON DELETE SET DEFAULT
ON UPDATE CASCADE;

Tabelle Termin
ALTER TABLE termin
ADD FOREIGN KEY (`tkundennummer`)
REFERENCES `dbwebanw_sose15_09`.`kunde` (`kundennummer`)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

Tabelle Mitarbeiter
ALTER TABLE mitarbeiter 
CHANGE adresse email VARCHAR(150),
ADD  FOREIGN KEY (`mitgeschaeftsstellennummer`)
REFERENCES `dbwebanw_sose15_09`.`geschaeftsstelle` (`geschaeftsstellennummer`)
ON DELETE SET NULL
ON UPDATE CASCADE,
ADD  FOREIGN KEY (`mitterminnummer`)
REFERENCES `dbwebanw_sose15_09`.`termin` (`terminnummer`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
ADD  FOREIGN KEY (`mitfahrzeugnummer`)
REFERENCES `dbwebanw_sose15_09`.`fahrzeug` (`fahrzeugnummer`)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

Tabelle Kunde
ALTER TABLE kunde
CHANGE adresse email VARCHAR(150);


Tabelle Rechnung
ALTER TABLE rechnung
ADD FOREIGN KEY (`rkundennummer`)
REFERENCES `dbwebanw_sose15_09`.`kunde` (`kundennummer`)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

Die Tabelle Terminmanagement besteht nur aus Fremdschlüsseln. Ich habe leider keine Informationen gefunden wie man in so einem Fall vorgeht. Darum sollten wir uns bald kümmern!
Ebenso müssen wir eine neue Mapping Tabelle Anlegen für Mitarbeiter, Termin und Fahrzeuge. 

